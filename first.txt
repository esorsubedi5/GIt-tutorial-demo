this version 1 of this project
simple commands for git bash terminal
git status (check status of git respository stages and commited)
git init (initialize folder into git repository "donot run if already initialized")
rm -rf .git (deletes git repository)
git add filename.file_type(stage individual files)
git add --all (stages all files)
git add . (stages all files)
git commit -m "commit text" (commits staged files in git respository)
git commit "commit text"(opens commit terminal)
git commit -a -m "commit text"(commits all modified file without staging)
git log (shows all commit history)
git clone weblink (clones all repositoty into your computer from github repository)
git clone weblink foldername (clones but as foldername you give)
touch filename(linux command to create any file)
touch .gitignore(create gitignore to ignore not required file to commit ot stage)
git diff (comapres working directory with staging directory)
git diff --staged (comapres staging directory with commited resposotory)
git rm file.name(removes file and stages automatically)
git mv oldfile.name newfie.name(renames/moving files and stages automatically)
git rm --cached file.name(untracks the file from git but is available in working repository)(to ignore completly include file in .gitignore)
rm -rf .git(removes git repository from git)
git log -p (show history in commits with what removed and added)
git log -p N(n=number of log you wanna see)
git log --stat(shows commit changes in brief)
git log --pretty=oneline(show commits in oneline)
git log --pretty=short(show commits in short)
git log --since=n.days(show since n number of days)
git log --since=n.weeks(show since n number of weeks)
git log --since=n.months(show since n number of months)
git log --pretty=format:"%h -- %an"(shows hash short and author name)
ae(author email) look in got log documentation in pretty format
git restore --staged filename(to unstage file)
git checkout -- filename (resotre to last stage to file/ undo chnages)
git checkout -f (restores all files in to last commited/ unmodifies all files)
git remote add remoteNAme githubWeblink(adds  git repository in github)
git remote (checks remote working repository)
git remote -v (shows remote repository)
git push -u remoteName master (push all repository in github)
if ssh key not applies in git then
ssh-keygen -t remfilename -b 4096 -C "your email in github"
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_remfilename
tail ~/.ssh/id_remfilename.pub(gives ssh keys copy and paspe in new ssh new authuciation in github setting ssh keys)
and then
git push -u remoteName master
